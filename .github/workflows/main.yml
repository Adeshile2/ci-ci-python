on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev 
    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Run Terraform ECR
        uses: hashicorp/setup-terraform@v3

      - name: Check environment variables
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform Plan
        run: terraform plan -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
        working-directory: ./Terraform

      - name: Terraform Apply
        run: terraform apply -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -auto-approve
        working-directory: ./Terraform
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Get Terraform outputs and parse ECR ARN
        id: tf_outputs
        working-directory: ./Terraform
        run: |
          # Retrieve the ECR ARN from Terraform output
          ECR_ARN=$(terraform output -raw aws_ecr_repo)
          echo "ECR ARN: $ECR_ARN"
          
          # Extract repository name (everything after "repository/")
          ECR_REPOSITORY_NAME=$(echo "$ECR_ARN" | awk -F'/' '{print $2}')
          
          # Extract AWS region and account id from the ARN
          AWS_REGION=$(echo "$ECR_ARN" | cut -d: -f4)
          ACCOUNT_ID=$(echo "$ECR_ARN" | cut -d: -f5)
          
          # Construct the ECR repository URL: ACCOUNT_ID.dkr.ecr.AWS_REGION.amazonaws.com/REPOSITORY_NAME
          ECR_REPOSITORY_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
          
          # Export variables for subsequent steps
          echo "ECR_REPOSITORY_NAME=${ECR_REPOSITORY_NAME}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=${ECR_REPOSITORY_URL}" >> $GITHUB_ENV

      - name: Build, tag, and push Backend Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: ${{ env.ECR_REPOSITORY_NAME }}
          ECR_REPOSITORY_URL: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: backend-latest
        run: |
          docker build ./backend --file ./backend/Dockerfile --tag $ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REPOSITORY_URL:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
          
      - name: Build, tag, and push frontend Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: ${{ env.ECR_REPOSITORY_NAME }}
          ECR_REPOSITORY_URL: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: frontend-latest
        run: |
          docker build ./frontend --file ./frontend/Dockerfile --tag $ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REPOSITORY_URL:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt

      - name: Run backend service
        run: |
          cd backend
          python app.py &
          sleep 5  # Wait for the backend to start

      - name: Run frontend service
        run: |
          cd frontend
          python app.py &
          sleep 5  # Wait for the frontend to start

      - name: Install and run tests
             
        run: |
          # Install Python dependencies
          python --version
          which python
          pip install --upgrade pip
          pip install pytest
          pip install requests
      
          # Start the backend service
          cd backend
          python app.py &
          sleep 5  # Wait for the backend to start
      
          # Start the frontend service
          cd ../frontend
          python app.py &
          sleep 5  # Wait for the frontend to start
      
          # Run the tests
          cd ..
          pytest test_services.py -v

