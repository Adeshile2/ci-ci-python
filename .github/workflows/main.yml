on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      #Iniitialize and apply terraform tp create the ECR repository
      - name: Run Terraform ECR
        uses: hashicorp/setup-terraform@v3
        

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform apply
        run: terrafrom plan -var-file="dev.tfvars"
        working-directory: ./Terraform

      - name: Terraform Apply
        run: terraform apply -var-file="dev.tfvars"
        working-directory: ./Terraform

      # Retrieve the ECR repository name from Terraform output
      - name: Get ECR Repository Name
        id: terraform-output
        working-directory: ./Terraform
        run: |
              echo "ECR_REPOSITORY_NAME=$(terraform output -raw ecr_repository_name)" >> $GITHUB_ENV
              echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag , and push docker image to Amzon ECR
        env: 
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY_NAME: ${{ env.ECR_REPOSITORY_NAME }}
          ECR_REPOSITORY_URL: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: latest-python-build

        run: |
          docker build . --file Dockerfile --tag $ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REPOSITORY_URL:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run backend service
        run: |
          cd backend
          python app.py &
          sleep 5  # Wait for the backend to start

      - name: Run frontend service
        run: |
          cd frontend
          python app.py &
          sleep 5  # Wait for the frontend to start

      - name: Run tests
        run: |
          pytest tests/test_services.py -v
